import React from 'react'
import Title from '../../components/Typography'
import EventLoop from '../../app/assets/event-loop.gif'

const JSEventLoop: React.FC = () => {
	return (
		<>
			<Title text="Event Loop" />
			<p>
				<strong>Event Loop (або "цикл подій") у JavaScript</strong> — це
				механізм, який дозволяє мові виконувати асинхронні операції,
				наприклад, обробку подій, запити до серверу або затримки в часі,
				без блокування основного потоку виконання коду.
			</p>
			<p>
				Уявіть, що JavaScript виконує ваш код рядок за рядком. Коли
				зустрічається асинхронна операція, наприклад, запит до серверу
				або таймер, вона не зупиняє виконання всього коду, щоб чекати на
				результат. Замість цього JavaScript передає цю асинхронну
				операцію в чергу (queue) і продовжує виконувати інші команди.
			</p>
			<p>
				<strong>Call stack</strong> — це структура даних, яка зберігає
				інформацію про активні виконувані функції. Коли функція
				викликається, вона додається у верхню частину стека. Коли
				функція завершена, вона видаляється зі стека. Це працює як
				принцип LIFO (Last In, First Out), де остання додана функція є
				першою, яка виконується до кінця.
			</p>
			<p>
				<strong>Microtasks</strong> — це завдання, які виконуються після
				завершення поточної операції та перед початком наступного циклу
				подій. Мікротаски мають вищий пріоритет, ніж макротаски, і
				завжди виконуються до них. До мікротасок відносяться, наприклад,
				async/await, Promise.then(), Promise.catch(), queueMicrotask,
				process.nextTick() (в Node.js).
			</p>
			<p>
				<strong>Macrotasks</strong> — це завдання, які додаються до
				черги подій і виконуються після завершення всіх мікротасок
				поточного циклу подій. До макротасок відносяться, наприклад,
				setTimeout(), setInterval(), setImmediate().
			</p>
			<p>
				<strong>Web API</strong> - це набір асинхронних API, що
				надаються середовищем виконання (наприклад, браузером), який дає
				змогу виконувати такі завдання, як: робота з DOM, надсилання
				AJAX-запитів, установлення таймерів і багато іншого. Ці API не є
				частиною JS, але їх можна викликати з JavaScript.
			</p>
			<strong>Порядок виконання</strong>
			<ul>
				<li>
					1. Виконується основний потік коду + виконуються скрипти в
					тілі створення промісів
				</li>
				<li>
					2. Виконуються мікротаски. Мікротаски = проміси. Також є
					можливість примусово мікромізувати завдання за допомогою
					queueMicrotask(f). (Важливо пам'ятати, що виконуються ВСІ
					проміси)
				</li>
				<li>
					3. Виконується макротаска Макротаска - це у нас або
					браузерне API. Далі, цикл повторюється. Якщо основний потік
					пустий і мікрозадач теж немає, послідовно виконуються
					макротаски.
				</li>
			</ul>
			<img className="mt-4" src={EventLoop} alt="Event Loop Schema" />
		</>
	)
}

export default JSEventLoop
